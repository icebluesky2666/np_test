function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import * as React from 'react';
import { Fragment, useState, useEffect } from 'react';
import { useMenus, useWindowSize, usePrevious } from 'docz';
import styled from 'styled-components';
import { get } from "../../../utils/theme";
import { mq, breakpoints } from "../../../styles/responsive";
import { Logo } from "../Logo";
import CustomSearch from "../Search/CustomSearch";
import { Hamburger } from "./Hamburger";
import CustomMenu from "./CustomMenu";
var sidebarBg = get('colors.sidebarBg');
var sidebarText = get('colors.sidebarText');
var Wrapper = styled.div.withConfig({
  displayName: "Sidebar__Wrapper"
})(["position:relative;width:316px;min-width:316px;min-height:100vh;background:", ";transition:transform 0.2s,background 0.3s;z-index:1000;", ";dl{padding:0;margin:0 16px;}dl a{font-weight:400;}@media screen and (max-width:", "px){transform:translateX(", ");position:", ";}", ";"], sidebarBg, mq({
  position: ['absolute', 'absolute', 'absolute', 'relative']
}), breakpoints.desktop - 1, function (p) {
  return p.opened ? '-100%' : '0';
}, function (p) {
  return p.opened ? 'auto' : 'fixed';
}, get('styles.sidebar'));
var Content = styled.div.withConfig({
  displayName: "Sidebar__Content"
})(["position:fixed;top:24px;left:0;display:flex;flex-direction:column;width:316px;min-width:316px;height:100%;max-height:100vh;"]);
var Empty = styled.div.withConfig({
  displayName: "Sidebar__Empty"
})(["flex:1;opacity:0.7;padding:24px 24px;color:", ";"], sidebarText);
var BuiltWith = styled.div.withConfig({
  displayName: "Sidebar__BuiltWith"
})(["width:100%;bottom:0px;padding:24px;margin-bottom:24px;"]);
export var Sidebar = function Sidebar() {
  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      hidden = _useState2[0],
      setHidden = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      query = _useState4[0],
      setQuery = _useState4[1];

  var menus = useMenus({
    query: query
  });
  var windowSize = useWindowSize();
  var isDesktop = windowSize.outerWidth >= breakpoints.desktop;
  var prevIsDesktop = usePrevious(isDesktop);
  var browserLanguage = window.navigator.language;
  var emptyPlaceholder = 'No documents found.';

  if (browserLanguage === 'zh-CN') {
    emptyPlaceholder = '未找到相应组件';
  }

  useEffect(function () {
    if (!hidden && !prevIsDesktop && isDesktop) {
      setHidden(true);
      document.documentElement.classList.remove('with-overlay');
    }
  });

  var addOverlayClass = function addOverlayClass(isHidden) {
    var method = !isHidden ? 'add' : 'remove';

    if (window && typeof window !== 'undefined' && !isDesktop) {
      document.documentElement.classList[method]('with-overlay');
    }
  };

  var handleSidebarToggle = function handleSidebarToggle() {
    setHidden(function (s) {
      return !s;
    });
    addOverlayClass(!hidden);
  };

  return React.createElement(Fragment, null, React.createElement(Wrapper, {
    opened: hidden
  }, React.createElement(Content, null, React.createElement(Hamburger, {
    opened: !hidden,
    onClick: handleSidebarToggle
  }), process.env.BIGFISH_VERSION ? null : React.createElement(Logo, {
    showBg: !hidden
  }), React.createElement(CustomSearch, {
    onSearch: setQuery
  }), menus && menus.length === 0 ? React.createElement(Empty, null, emptyPlaceholder) : React.createElement(CustomMenu, {
    query: query
  }), process.env.BIGFISH_VERSION ? null : React.createElement(BuiltWith, null, React.createElement("span", null, "Build with "), React.createElement("a", {
    href: "https://github.com/umijs/father"
  }, "father"), React.createElement("span", null, " and "), React.createElement("a", {
    href: "https://www.docz.site"
  }, "docz")))));
};