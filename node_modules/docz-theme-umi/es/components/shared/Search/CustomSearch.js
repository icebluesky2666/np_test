import "antd/lib/icon/style";
import _Icon from "antd/lib/icon";
import "antd/lib/input/style";
import _Input from "antd/lib/input";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import styled from 'styled-components';
var Wrapper = styled.div.withConfig({
  displayName: "CustomSearch__Wrapper"
})(["width:100%;position:relative;padding-left:36px;"]);
var InputWrapper = styled(_Input).withConfig({
  displayName: "CustomSearch__InputWrapper"
})(["border:none !important;box-shadow:none !important;"]);
var SearchIcon = styled(_Icon).withConfig({
  displayName: "CustomSearch__SearchIcon"
})(["position:absolute;left:24px;top:10px;cursor:pointer;"]);

var CustomSearch = function CustomSearch(_ref) {
  var onSearch = _ref.onSearch;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      query = _useState2[0],
      setQuery = _useState2[1];

  var onPressEnter = function onPressEnter(e) {
    onSearch(e.target.value);
  };

  var onChange = function onChange(e) {
    setQuery(e.target.value);
  };

  var onClickSearch = function onClickSearch() {
    onSearch(query || '');
  };

  return React.createElement(Wrapper, null, React.createElement(InputWrapper, {
    placeholder: "\u5728\u7EC4\u4EF6\u4E2D\u641C\u7D22",
    onPressEnter: onPressEnter,
    onChange: onChange,
    value: query
  }), React.createElement(SearchIcon, {
    type: "search",
    onClick: onClickSearch
  }));
};

export default CustomSearch;