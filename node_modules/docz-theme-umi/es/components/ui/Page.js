function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { Fragment, useEffect, useState, useRef } from 'react';
import { useConfig, Link } from 'docz';
import Edit from 'react-feather/dist/icons/edit-2';
import styled from 'styled-components';
import { ButtonLink } from "./Button";
import { GithubLink, Sidebar, Main } from "../shared";
import { get } from "../../utils/theme";
import { mq } from "../../styles/responsive";
var Wrapper = styled.div.withConfig({
  displayName: "Page__Wrapper"
})(["flex:1;color:", ";background:", ";min-width:0;position:relative;display:flex;flex-direction:row;"], get('colors.text'), get('colors.background'));
export var Container = styled.div.withConfig({
  displayName: "Page__Container"
})(["box-sizing:border-box;", " ", ";"], function (props) {
  return mq({
    width: props.fullpage ? ['100%', '100%', '100%'] : ['100%', 'calc(100% - 113px)', 'calc(100% - 113px)'],
    padding: ['20px', '0 24px 24px']
  });
}, get('styles.container'));
var EditPage = styled(ButtonLink.withComponent('a')).withConfig({
  displayName: "Page__EditPage"
})(["display:flex;align-items:center;justify-content:center;position:absolute;padding:2px 8px;margin:8px;border-radius:", ";border:1px solid ", ";opacity:0.7;transition:opacity 0.4s;font-size:14px;color:", ";text-decoration:none;text-transform:uppercase;&:hover{opacity:1;background:", ";}", ";"], get('radii'), get('colors.border'), get('colors.text'), get('colors.border'), mq({
  visibility: ['hidden', 'hidden', 'visible'],
  top: [0, -60, 32],
  right: [0, 0, 40]
}));
var EditIcon = styled(Edit).withConfig({
  displayName: "Page__EditIcon"
})(["margin-right:5px;"]);
var AnchorWrapper = styled.div.withConfig({
  displayName: "Page__AnchorWrapper"
})(["position:relative;padding-top:24px;> div{position:fixed;}"]);
var Anchor = styled.div.withConfig({
  displayName: "Page__Anchor"
})(["border-left:1px solid #f0f0f0;border-color:", ";line-height:20px;padding:", ";> a{width:80px;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}"], function (props) {
  return props.isCurrent ? get('colors.blue') : '#f0f0f0';
}, function (props) {
  return props.depth === 2 ? '4px 16px' : '4px 16px 4px 28px';
});
var LinkWrapper = styled(Link).withConfig({
  displayName: "Page__LinkWrapper"
})(["font-size:12px;"]);
export var Page = function Page(_ref) {
  var children = _ref.children,
      _ref$doc = _ref.doc,
      link = _ref$doc.link,
      fullpage = _ref$doc.fullpage,
      _ref$doc$edit = _ref$doc.edit,
      edit = _ref$doc$edit === void 0 ? true : _ref$doc$edit,
      headings = _ref$doc.headings;

  var _useConfig = useConfig(),
      repository = _useConfig.repository; // 右侧锚点只跟踪 h2 和 h3


  var anchors = headings.filter(function (v) {
    return [2, 3].includes(v.depth);
  });
  var _location = location,
      pathname = _location.pathname,
      hash = _location.hash;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      currentSlug = _useState2[0],
      setCurrentSlug = _useState2[1];

  var mounted = useRef(false);

  var handler = function handler() {
    if (mounted.current) {
      setCurrentSlug(localStorage.getItem('currentSlug'));
    } else {
      mounted.current = true;
    }
  };

  useEffect(function () {
    if (hash) {
      setCurrentSlug(decodeURI(hash.slice(1)));
    } else if (anchors.length) {
      setCurrentSlug(anchors[0].slug);
    }

    window.addEventListener('storage', handler);
    return function () {
      window.removeEventListener('storage', handler);
    };
  }, [hash]);
  var content = React.createElement(Fragment, null, link && edit && React.createElement(EditPage, {
    href: link,
    target: "_blank"
  }, React.createElement(EditIcon, {
    width: 14
  }), " Edit page"), children);

  var highlightAnchor = function highlightAnchor(slug) {
    if (currentSlug === slug) {
      return {
        color: '#1890ff'
      };
    } else {
      return {
        color: 'rgba(0, 0, 0, .65'
      };
    }
  };

  return React.createElement(Main, null, repository && React.createElement(GithubLink, {
    repository: repository
  }), !fullpage && React.createElement(Sidebar, null), React.createElement(Wrapper, null, fullpage ? React.createElement(Container, {
    fullpage: true
  }, content) : React.createElement(React.Fragment, null, React.createElement(Container, null, content), React.createElement(AnchorWrapper, null, React.createElement("div", null, anchors.map(function (a) {
    return React.createElement(Anchor, {
      key: a.slug,
      slug: a.slug,
      isCurrent: currentSlug === a.slug,
      depth: a.depth
    }, React.createElement(LinkWrapper, {
      className: "page-anchor",
      to: "".concat(pathname, "#").concat(a.slug),
      style: highlightAnchor(a.slug)
    }, a.value));
  }))))));
};