function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { useRef, useEffect } from 'react';
import { useConfig } from 'docz';
import styled from 'styled-components';
import Hash from 'react-feather/dist/icons/hash';
import { get } from "../../utils/theme";
import scrollama from 'scrollama';
import 'intersection-observer';
var Icon = styled(Hash).withConfig({
  displayName: "H3__Icon"
})(["position:absolute;display:inline-block;top:7px;left:-22px;opacity:0;transition:opacity 0.2s;color:", ";"], get('colors.primary'));
var Heading = styled.h3.withConfig({
  displayName: "H3__Heading"
})(["position:relative;&:hover .heading--Icon{opacity:1;}", ";"], get('styles.h3'));
export var H3 = function H3(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  var pathname = typeof window !== 'undefined' ? location.pathname : '/';

  var _useConfig = useConfig(),
      Link = _useConfig.linkComponent;

  if (!Link) return null;
  var isMounted = useRef(false);
  useEffect(function () {
    // 空标题直接 return
    if (!props.id) {
      return;
    } // instantiate the scrollama


    var scroller = scrollama(); // setup the instance, pass callback functions

    scroller.setup({
      step: '#' + props.id,
      offset: 0.05,
      order: false
    }).onStepEnter(function () {
      if (isMounted.current && props.id !== localStorage.getItem('currentSlug')) {
        localStorage.setItem('currentSlug', props.id || '');
        window.dispatchEvent(new Event('storage'));
      } else {
        isMounted.current = true;
      }
    }); // setup resize event

    window.addEventListener('resize', scroller.resize);
    return function () {
      window.removeEventListener('resize', scroller.resize);
    };
  }, []);
  return React.createElement(Heading, props, React.createElement(Link, {
    "aria-hidden": true,
    to: "".concat(pathname, "#").concat(props.id)
  }, React.createElement(Icon, {
    className: "heading--Icon",
    height: 16
  })), children);
};